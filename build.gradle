buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}

	repositories {
		maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
		maven { url 'http://139.196.194.172:8181/nexus/content/repositories/99rep/' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.jiujiu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
	maven { url 'http://139.196.194.172:8181/nexus/content/repositories/99rep/' }

}

configurations {
	providedRuntime
	mybatisGenerator
}

ext {
	springCloudVersion = 'Finchley.RELEASE'
}

dependencies {

	compile fileTree(dir:'libs',include:['*.jar'])
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	mybatisGenerator 'mysql:mysql-connector-java:5.1.40'
	mybatisGenerator 'tk.mybatis:mapper:3.3.9'
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
	compile('com.jiujiu.wisdom:core-util:Releases')
	compile('com.jiujiu.wisdom:jiujiu-util:Releases')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
	compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3')
	compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
	testCompile('org.springframework.boot:spring-boot-starter-test')


	//springcloud
	compile('org.springframework.cloud:spring-cloud-starter')
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-eureka', version: '1.3.5.RELEASE'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-config', version: '2.0.1.RELEASE'
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-bus-amqp', version: '2.0.0.RELEASE'

	//spring boot 监控
	compile group: 'io.prometheus', name: 'simpleclient_spring_boot', version: '0.0.26'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.0.4.RELEASE'
	compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.0.6'


    //swagger2
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'

	//elk
	compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.11'


	//data
	runtime('mysql:mysql-connector-java')
	compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}


task mybatisGenerate << {
	 def properties = getDbProperties()
	 ant.properties['targetProject'] = projectDir.path
	 ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	 ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	 ant.properties['userId'] = properties.getProperty("jdbc.username")
	 ant.properties['password'] = properties.getProperty("jdbc.password")
	 ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	 ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	 ant.properties['modelPackage'] = properties.getProperty("package.model")
	 ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	 ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	 ant.taskdef(
				name: 'mbgenerator',
				classname: 'org.mybatis.generator.ant.GeneratorAntTask',
				classpath: configurations.mybatisGenerator.asPath
		)
	 ant.mbgenerator(overwrite: true,
			 configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
		 propertyset {
				propertyref(name: 'targetProject')
				propertyref(name: 'userId')
				propertyref(name: 'driverClass')
				propertyref(name: 'connectionURL')
				propertyref(name: 'password')
				propertyref(name: 'src_main_java')
				propertyref(name: 'src_main_resources')
				propertyref(name: 'modelPackage')
				propertyref(name: 'mapperPackage')
				propertyref(name: 'sqlMapperPackage')
			}
		}
}